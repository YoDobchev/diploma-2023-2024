<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="/public/styles/board.css">
    <link rel="shortcut icon" href="/public/icons/icon.svg" type="image/x-icon">
    <title><%= board %> | LensBrew</title>
</head>
<body>
    <%- include('partials/navbar') %>
    <div id="customConfirmBox">
        <div class="confirm-content">
            <p id="confirmQuestion">Do you want to proceed?</p>
            <div>
                <button onclick="handleConfirm(true)">Confirm</button>
                <button onclick="handleConfirm(false)">Cancel</button>
            </div>
        </div>
    </div>
    <div class="row">
        <div class="threads">
            <% threads.sort((a, b) =>  new Date(b.createdat) - new Date(a.createdat)); %>
            <% threads.forEach((thread) => { %>
                <div class="thread">
                        <a href="/<%= board %>/<%= thread.id %>">
                        <div class="header">
                            <h3><%= thread.title %></h3>
                            <% if (thread.description) { %>
                                <h4><%= thread.description %></h4>
                            <% } %>
                        </div>
                        <div class="info">
                            <div class="block">
                                <span class="user-icon"></span>
                                <p><%= thread.created_by ? thread.created_by : 'Anonymous' %></p>
                            </div>
                            <div class="block">
                                <span class="timer-icon"></span>
                                <p class="countdown-timer" data-created-at="<%= thread.createdat %>"></p>
                            </div>
                            <div class="block">
                                <span class="reply-icon"></span>
                                <p>: <%= thread.dataValues.postsCount %></p>
                            </div>
                            <% if (user && (thread.created_by == user || user == 'admin')) { %>
                                <div class="block">
                                    <span class="delete-thread-icon" threadId="<%= thread.id %>"></span>
                                </div>
                            <% } %>
                        </div>
                    </a>
                </div>
            <% }); %>
        </div>
    </div>
    <div class="new-thread-container">
        <div class="new-container">
            <h3>Creating a new discussion thread on the <board><%= board %></board> board...</h3>
            <div class="divider"></div>
            <p id="new-title-p">Title*</p>
            <textarea name="" id="new-title" placeholder="Title" maxlength="200"></textarea>
            <p>Description</p>
            <textarea name="" id="new-description" rows="5" placeholder="Description"></textarea>
            <button id="new-thread-button">Create Thread</button>
            <!-- <p>Custom ID</p>
            <div class="custom-url-container">
                <input type="checkbox">
                <textarea name="" id="custom-url"></textarea>
            </div> -->
        </div>
        <div class="new-thread-icon">
            <span></span>
        </div>
    </div>
    <script>
        function generateId() {
            const set = "0123456789";
            let id = "";

            for (let i = 0; i < 8; i++) {
                const randomi = Math.floor(Math.random() * set.length);
                id += set[randomi];
            }

            return id;
        }

        function showConfirm(question, callback) {
            document.getElementById('confirmQuestion').innerText = question;
            document.getElementById('customConfirmBox').style.display = 'flex';
            confirmCallback = callback;
        }

        function handleConfirm(isConfirmed) {
            document.getElementById('customConfirmBox').style.display = 'none';
            if (isConfirmed && typeof confirmCallback === 'function') {
                confirmCallback();
            }
            confirmCallback = null;
        }

        // document.getElementById('custom-url').value = generateId()

        function updateCountdownTimers() {
            const timers = document.querySelectorAll('.countdown-timer');

            timers.forEach(timer => {
                const createdAtString = timer.getAttribute('data-created-at');
                const createdAt = new Date(createdAtString);
                const deadline = new Date(createdAt.getTime() + 24 * 60 * 60 * 1000);
                const now = new Date();
                const remainingTime = deadline - now;

                if (remainingTime > 0) {
                    const hours = Math.floor((remainingTime / (1000 * 60 * 60)) % 24);
                    const minutes = Math.floor((remainingTime / 1000 / 60) % 60);
                    const seconds = Math.floor((remainingTime / 1000) % 60);

                    timer.innerHTML = `${hours}h ${minutes}m ${seconds}s`;
                } else {
                    timer.innerHTML = "EXPIRED";
                    timer.classList.add('red');
                }
            });
        }
        updateCountdownTimers();

        setInterval(updateCountdownTimers, 1000);

        document.querySelectorAll('.delete-thread-icon').forEach(deleteBtn => {
            deleteBtn.addEventListener('click', (e) => {
                e.preventDefault();
                e.stopPropagation();
                showConfirm('Are you sure you want to delete this thread?', () => {
                    const data = {
                        threadId: deleteBtn.getAttribute('threadid')
                    }
                    fetch('/<%= board %>', {
                        method: 'DELETE',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify(data)
                    })
                    .then(res => {
                        if (res.status == 200) {
                            location.reload();
                        }
                    });
                });
            });
        });

        document.querySelector('.new-thread-icon').addEventListener('click', () => {
            document.querySelector('.new-thread-icon').style.display = 'none';
            document.querySelector('.new-container').style.display = 'flex';
        });

        document.getElementById('new-thread-button').addEventListener('click', () => {
            const threadId = generateId();
            const title = document.getElementById('new-title').value;
            if (!title) {
                document.getElementById('new-title-p').classList.add('reminder');
                return;
            }
            const description = document.getElementById('new-description').value;
            const data = {
                threadId: threadId,
                title: title,
                description: description
            }
            fetch('/<%= board %>', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(data)
            })
            .then(res => {
                if (res.status == 200) {
                    location.reload();
                }
            });
        });
    </script>
</body>
</html>