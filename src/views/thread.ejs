<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="/public/styles/thread.css">
    <title>Document</title>
</head>
<body>
    <%- include('partials/navbar') %>

    <div class="posts">
        <div class="post">
            <div class="post-content">
                <div class="post-header">
                    <h2 class="username">gosho ebacha</h2>
                    <h2 class="date">â€¢ feb2</h2>
                </div>
                <p class="post-text">pishkaaaaaa</p>

                <div class="post-image">
                    <img class="post-image-src" src="/public/images/archived/040729e7-4515-49ce-b6a6-e6c864e915c8.jpg" alt="">
                    <span class="focus-image"></span>
                </div>
                
                <hr>
                <div class="icon-bar">
                    <span class="heart"></span>
                    <span class="reply"></span>
                </div>
            </div>
        </div>
    </div>
    <div id="new-post-container">
        <div>
            <form id="imageForm" enctype="multipart/form-data">
                <input id="image" type="file" name="image" accept="image/png, image/jpeg"/>
                <label id="image-icon" for="image"></label>
                <input id="postText" type="text">
                <button type="submit">Upload</button>
            </form>
        </div>
        <div>
            <img id= "image_view" src="" alt="">

        </div>
        <!-- <form id="imageForm" enctype="multipart/form-data"> -->
        <div>
            <input type="range" name="" id="hue-slider">
        </div>
        <!-- </form> -->
    </div>
    <script>
        const posts = <%- JSON.stringify(posts) %>;

        let fileExt;

        function generateSessionId() {
            return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {
                var r = Math.random() * 16 | 0, v = c == 'x' ? r : (r & 0x3 | 0x8);
                return v.toString(16);
            });
        }
        
        // Store the session ID in session storage
        if (!sessionStorage.getItem('session_id')) {
            sessionStorage.setItem('session_id', generateSessionId());
        }

        function nestPosts(posts) {
            const postMap = new Map();

            posts.forEach(post => postMap.set(post.id, { ...post, replies: [] }));

            posts.forEach(post => {
                if (post.reply_to_id) {
                    postMap.get(post.reply_to_id).replies.push(postMap.get(post.id));
                }
            });

            return Array.from(postMap.values()).filter(post => post.reply_to_id === null);
        }

        function renderPosts(posts, depth = 0) {
            posts.forEach(post => {
                const postsContainer = document.querySelector('.posts');
                const postDiv = document.createElement('div');
                postDiv.className = 'post';
                postDiv.id = post.id;
                postDiv.style.marginLeft = `${depth * 20}px`;

                const p = document.createElement('p');
                p.textContent = post.text;

                const replyIcon = document.createElement('span');
                replyIcon.id = 'reply-icon';

                if (post.images && post.images.length > 0) {
                    const img = document.createElement('img');
                    img.src = `/public/images/archived/${post.images[0].path}`;
                    postDiv.appendChild(img);
                }
                postDiv.appendChild(p);
                postDiv.appendChild(replyIcon);
                postsContainer.appendChild(postDiv);

                if (post.replies && post.replies.length > 0) {
                    renderPosts(post.replies, depth + 1);
                }
            });
        }

        posts.sort((a, b) => new Date(a.createdat) - new Date(b.createdat));
        const nestedPosts = nestPosts(posts);
        renderPosts(nestedPosts);

        // const sessionId = sessionStorage.getItem('session_id');
        // console.log(sessionId)
        // fetch('https://your-backend-endpoint.com/data', {
        //     method: 'POST',
        //     headers: {
        //         'Content-Type': 'application/json',
        //         'Session-ID': sessionId // Include the session ID in the request header
        //     },
        //     body: JSON.stringify({ /* your data */ })
        // })
        // .then(response => response.json())
        // .then(data => console.log(data))
        // .catch(error => console.error('Error:', error));
        document.querySelectorAll('#reply-icon').forEach(reply_btn => {
            reply_btn.addEventListener('click', () => {
                console.log(reply_btn.parentElement.id)
            });
        });

        document.getElementById('postText').addEventListener('keydown', (ev) => {
            if (event.key === 'Enter' || event.keyCode === 13) {
                ev.preventDefault();
                console.log(document.getElementById('postText').value)
                const data = {
                    postId: generateSessionId(),
                    text: document.getElementById('postText').value,
                    ext: fileExt,
                }
                fetch(`<%= thread %>/createPost`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'Session-ID': sessionStorage.getItem('session_id')
                    },
                    body: JSON.stringify(data)
                });
                sessionStorage.setItem('session_id', generateSessionId());


                // .then(response => response.json())
                // .then(data => {
                //     document.getElementById('image_view').src = `${data.filepath}?${generateSessionId()}`;
                // });
            };
        });
        
        document.getElementById('image').addEventListener('input', () => {
            const data = new FormData(document.getElementById('imageForm'));
            fileExt = document.getElementById('image').files[0].name.split('.').pop();
            console.log(document.getElementById('image').files[0].name)
            console.log(sessionStorage.getItem('session_id'))
            fetch(`<%= thread %>/upload`, {
                method: 'POST',
                headers: {
                    'Session-ID': sessionStorage.getItem('session_id')
                },
                body: data
            })
            .then(response => response.json())
            .then(data => {
                document.getElementById('image_view').src = `${data.filepath}?${generateSessionId()}`;
            });
        });

        document.getElementById('hue-slider').addEventListener('change', () => {
            document.getElementById('image_view').classList.add('blur');
            const data = {
                hue: document.getElementById('hue-slider').value,
                ext: fileExt,
            }
            fetch(`<%= thread %>/filter`, {
                method: 'PATCH',
                headers: {
                    'Content-Type': 'application/json',
                    'Session-ID': sessionStorage.getItem('session_id')
                },
                body: JSON.stringify(data)
            })
            .then(response => response.json())
            .then(data => {
                document.getElementById('image_view').src = `${data.filepath}?${generateSessionId()}`;
                document.getElementById('image_view').classList.remove('blur');
            })
        });

        </script>
</body>
</html>