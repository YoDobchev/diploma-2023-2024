<%
const plainPosts = posts.map(post => post.get({ plain: true }));
plainPosts.sort((a, b) => new Date(a.createdat) - new Date(b.createdat));

function simplifyImages(post) {
    post.images = post.images.map(image => ({path: image.path, id: image.id}));
    return post;
}

const simplifiedPosts = plainPosts.map(post => simplifyImages(post));

function nestPosts(posts) {
    const postMap = new Map();

    posts.forEach(post => postMap.set(post.id, { ...post, replies: [] }));

    posts.forEach(post => {
        if (post.reply_to_id) {
            const parent = postMap.get(post.reply_to_id);
            if (parent) {
                parent.replies.push(postMap.get(post.id));
            }
        }
    });

    return Array.from(postMap.values()).filter(post => !post.reply_to_id);
}

function extractImages(posts) {
    const images = [];

    function recurseThroughPosts(posts) {
        posts.forEach(post => {
            post.images.forEach(image => {
                images.push({postId: post.id, imagePath: image.path, imageId: image.id});
            });
            // If there are replies, go through them recursively
            if (post.replies && post.replies.length) {
                recurseThroughPosts(post.replies);
            }
        });
    }

    recurseThroughPosts(posts);
    return images;
}

const nestedPosts = nestPosts(simplifiedPosts);
const images = extractImages(nestedPosts);

%>
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="/public/styles/thread.css">
    <title>Document</title>
</head>
<body>
    <%- include('partials/navbar') %>
    <div class="overlay"></div>

    <div id="customConfirmBox">
        <div class="confirm-content">
            <p id="confirmQuestion">Do you want to proceed?</p>
            <div>
                <button onclick="handleConfirm(true)">Confirm</button>
                <button onclick="handleConfirm(false)">Cancel</button>
            </div>
        </div>
    </div>

    <div class="image-modal">
        <div class="modal-nav">
            <span class="close" onclick="unFocusImage()"></span>
        </div>
        <div class="main">
            <div class="image-container">
                <img class="post-image-full" src="" alt="">
            </div>
            <div class="vertical-hr"></div>
            <div class="model-filter-settings">
                <div class="image-filtering-prompt">
                    <p>Enable filtering</p>
                    <div class="filter-settings-start">
                        <span class="filter-settings-icon"></span>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="post-related-container <%= images.length > 0 ? 'image-margin' : ''%>">
        <div class="posts">
            <%
            function renderPosts(posts, level = 0) {
                posts.forEach(post => {
                    const monthNames = ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"];
                    const month = monthNames[post.createdat.getMonth()];
                    const day = post.createdat.getDate();
                    let hours = post.createdat.getHours();
                    let minutes = post.createdat.getMinutes();
                    minutes = minutes < 10 ? '0' + minutes : minutes;
                    const formattedDate = `${month} ${day} ${hours}:${minutes}`;
            %>
            <div class="post" id="<%= post.id %>" style="margin-left: <%= (level + 1) * 15 %>px;">
                <div class="post-content">
                    <div class="post-header">
                        <span class="user"></span>
                        <h2 class="username"><%= post.created_by ? post.created_by : 'Anonymous' %></h2>
                        <h2 class="date">â€¢ <%= formattedDate %></h2>
                    </div>
                    <p class="post-text"><%= post.text %></p>
                    <%
                        if (post.images.length > 0) {
                    %>
                    <div class="post-image-container">
                        <div class="post-image" onclick="focusImage(this)">
                        <img class="post-image-src" src="/<%= post.images[0].path %>" id="<%= post.images[0].id %>">
                        <span class="focus-image"></span>
                    </div>
                    </div>

                    <%
                        }
                    %>
                    <hr>

                    <div class="icon-bar">
                        <!-- <span class="heart"></span> --> 
                        <% if (user && (post.created_by == user || user == 'admin')) { %>
                            <span class="delete"></span>
                        <% } %>
                        <span class="reply"></span>
                    </div>
                </div>
                <% if (post.replies && post.replies.length > 0) {%>
                <div class="expand">
                    <div>
                        <span></span>
                    </div>
                </div>
                <%}%>
            </div>
                <div class="replies-container" id="<%= post.id %>-replies">
                <% if (post.replies && post.replies.length > 0) { %>
                    <% renderPosts(post.replies, level + 1); %>
                <% } %>
                </div>
            <%
                });
            }

            renderPosts(nestedPosts);
            %>
        </div>
        <div class="new-post-container-to-thread">
            <% if (nestedPosts.length == 0) { %>
                <p></p>
            <% } %>
            <div class="new-post-icon" onclick="reply()">
                <span></span>
            </div>
        </div>
    </div>
    <% if (images.length != 0) { %>
    <div class="images-scroll">
        <% images.forEach(image => { %>
            <div class="image-block" postId="<%= image.postId %>">
                <img src="/<%= image.imagePath %>" alt="">
            </div>
        <% }); %>
    </div>
    <% } %>
    <script>
        var imageId, imageExt, currentlyReviewingId, isFilteringEnabled = false , isCurrentlyExpectingFiltered = false;

        var filterSettings = {
            LIGHTEN: { label: 'LIGHTEN', min: 0, max: 100, value: 0, defaultValue: 0 },
            BRIGHTEN: { label: 'BRIGHTEN', min: 0, max: 100, value: 0, defaultValue: 0 },
            DARKEN: { label: 'DARKEN', min: 0, max: 100, value: 0, defaultValue: 0 },
            DESATURATE: { label: 'DESATURATE', min: 0, max: 100, value: 0, defaultValue: 0 },
            SATURATE: { label: 'SATURATE', min: 0, max: 100, value: 0, defaultValue: 0 },
            GREYSCALE: { label: 'GREYSCALE', min: 0, max: 100, value: 0, defaultValue: 0 },
            HUE: { label: 'HUE', min: 0, max: 360, value: 0, defaultValue: 0 },
            TINT: { label: 'TINT', min: 0, max: 100, value: 0, defaultValue: 0 },
            SHADE: { label: 'SHADE', min: 0, max: 100, value: 0, defaultValue: 0 },
            RED: { label: 'RED', min: 0, max: 255, value: 0, defaultValue: 0 },
            GREEN: { label: 'GREEN', min: 0, max: 255, value: 0, defaultValue: 0 },
            BLUE: { label: 'BLUE', min: 0, max: 255, value: 0, defaultValue: 0 },
        };

        function getArrayFromQueryString(parameterName) {
            const urlParams = new URLSearchParams(window.location.search);
            const items = urlParams.get(parameterName);
            return items ? items.split(',') : [];
        }

        function addItemToArray(parameterName, item) {
            const items = getArrayFromQueryString(parameterName);
            if (!items.includes(item)) {
                items.push(item);
                updateQueryString(parameterName, items);
            }
        }

        function removeItemFromArray(parameterName, item) {
            let items = getArrayFromQueryString(parameterName);
            items = items.filter(i => i !== item);
            updateQueryString(parameterName, items);
        }

        function updateQueryString(parameterName, items) {
            const urlParams = new URLSearchParams(window.location.search);
            if (items.length > 0) {
                urlParams.set(parameterName, items.join(','));
            } else {
                urlParams.delete(parameterName);
            }
            window.history.pushState({}, '', `${window.location.pathname}?${urlParams}`);
        }

        let confirmCallback = null;

        function showConfirm(question, callback) {
            document.getElementById('confirmQuestion').innerText = question;
            document.getElementById('customConfirmBox').style.display = 'flex';
            confirmCallback = callback;
        }

        function handleConfirm(isConfirmed) {
            document.getElementById('customConfirmBox').style.display = 'none';
            if (isConfirmed && typeof confirmCallback === 'function') {
                confirmCallback();
            }
            confirmCallback = null;
        }

        const changeRangeInputGradient = (input) => {
            let value = (input.value - input.min) / (input.max - input.min) * 100;
            input.style.background = 'linear-gradient(to right, #FFC3BA ' + value + '%, #4B4B4B ' + value + '%)';
        }

        document.querySelector('.filter-settings-start').addEventListener('click', () => {
            if (!isFilteringEnabled) {
                enableFiltering();
                return;
            }
            showConfirm('Disgard new post?', enableFiltering);
        });

        const enableFiltering = () => {
            isFilteringEnabled = true;
            // console.log(imageId)

            if (!imageId || currentlyReviewingId != imageId) {
                const url = document.querySelector('.post-image-full').src
                const lastSlashIndex = url.lastIndexOf('/');
                const lastDotIndex = url.lastIndexOf('.');
                const uuid = url.slice(lastSlashIndex + 1, lastDotIndex);
                const extension = url.slice(lastDotIndex + 1);
                // console.log(uuid)
                // console.log(document.querySelector(`[id="${uuid}"]`).closest('.post'))

                const newId = generateId();
                const data = {
                    archivedId: uuid,
                    archivedExt: extension,
                    newId: newId
                };
                fetch(`<%= thread %>/copyImage`, {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify(data)
                });
                console.log(uuid)
                const post = document.querySelector(`[id="${uuid}"]`).closest('.post');
                imageId = newId;
                imageExt = extension;
                const oldNewPost = document.querySelector('.new-post-container');
                let oldText = ''
                if (oldNewPost) {
                    oldText = oldNewPost.querySelector('textarea').value;
                }
                createNewPost(post.id, post.querySelector('.username').innerHTML);
                const newNewPost = document.querySelector('.new-post-container');
                newNewPost.querySelector('textarea').value = oldText;
                console.log(`/public/images/archived/${imageId}.${imageExt}`)
                deployImg(url);
                openModal(newId);
                return;
            }
            openModal(imageId)
        }

        const createFilterDiv = (filterSetting, includeHr) => {
            const filterContainer = document.createElement('div');
            filterContainer.className = 'filter-container';

            const header = document.createElement('h3');
            header.textContent = filterSetting.label;
            filterContainer.appendChild(header);

            const inputContainer = document.createElement('div');
            inputContainer.className = 'input-container';

            const pMin = document.createElement('p');
            pMin.textContent = filterSetting.min;
            inputContainer.appendChild(pMin);

            const input = document.createElement('input');
            input.setAttribute('type', 'range');
            input.setAttribute('min', filterSetting.min);
            input.setAttribute('max', filterSetting.max);
            input.setAttribute('value', filterSetting.defaultValue);
            changeRangeInputGradient(input);
            inputContainer.appendChild(input);

            const pValue = document.createElement('p');
            pValue.textContent = filterSetting.value;
            inputContainer.appendChild(pValue);
            input.addEventListener('change', () => {
                if (isCurrentlyExpectingFiltered) {
                    pValue.innerHTML = filterSettings[filterSetting.label].value;
                    input.value = filterSettings[filterSetting.label].value;
                    changeRangeInputGradient(input)
                    return;
                }
                // isCurrentlyExpectingFiltered = true;
                filterSettings[filterSetting.label].value = parseInt(input.value);
                const data = {
                    filterSettings: filterSettings,
                    imageId: imageId,
                    imageExt: imageExt,
                };

                document.querySelector('.post-image-full').classList.add('blur');
                fetch(`<%= thread %>/filter`, {
                    method: 'PATCH',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify(data)
                })
                .then(response => response.json())
                .then(data => {
                    isCurrentlyExpectingFiltered = false;
                    document.querySelector('.post-image-full').src = `${data.filepath}?${generateId()}`;
                    document.querySelector('.new-post-image-src').src = `${data.filepath}?${generateId()}`;
                    document.querySelector('.post-image-full').classList.remove('blur');
                });
            });

            filterContainer.appendChild(inputContainer);

            if (includeHr) {
                const hr = document.createElement('hr');
                filterContainer.appendChild(hr);
            }

            return filterContainer;
        }

        for (const setting in filterSettings) {
            if (filterSettings.hasOwnProperty(setting)) {
                const filterDiv = createFilterDiv(filterSettings[setting], true);
                document.querySelector('.model-filter-settings').appendChild(filterDiv);
            }
        }
        // filterSettings.forEach((setting, index) => {
        //     const includeHr = index !== filterSettings.length - 1;
        // });

        const openModal = (id) => {
            // console.log(isFilteringEnabled)
            // console.log(imageId)
            currentlyReviewingId = id;
            // console.log(currentlyReviewingId)
            // console.log(isFilteringEnabled && imageId == currentlyReviewingId)

            if (isFilteringEnabled && imageId == currentlyReviewingId) {
                document.querySelector('.image-filtering-prompt').style.display = 'none';
                document.querySelector('.model-filter-settings').style.justifyContent = 'flex-start';
                document.querySelectorAll('.filter-container').forEach(filter => {
                    filter.style.display = 'flex';
                });
                return;
            }
            document.querySelector('.image-filtering-prompt').style.display = 'flex';
            document.querySelector('.model-filter-settings').style.justifyContent = 'center';
            document.querySelectorAll('.filter-container').forEach(filter => {
                filter.style.display = 'none';
            });
        }

        const focusImage = (div) => {
            const modal = document.querySelector('.image-modal');
            document.querySelector('.overlay').style.display = 'block';
            modal.style.display = 'flex';
            modal.querySelector('img').src = div.firstElementChild.src;
            // console.log("aaa")
            // console.log(div.firstElementChild.id)
            openModal(div.id);
        }

        const unFocusImage = () => {
            document.querySelector('.image-modal').style.display = 'none';
            document.querySelector('.overlay').style.display = 'none';
        }

        function generateId() {
            return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {
                var r = Math.random() * 16 | 0, v = c == 'x' ? r : (r & 0x3 | 0x8);
                return v.toString(16);
            });
        }

        const expandPost = (id, shouldOnlyExpand) => {
            const repliesSectionId = `${id}-replies`;
            const repliesSection = document.getElementById(repliesSectionId);
            const expandBtn = document.getElementById(id).querySelector('.expand').querySelector('span');

            if (shouldOnlyExpand) {
                addItemToArray('expanded', id);
                repliesSection.style.display = 'block';
                expandBtn.style.backgroundImage = 'url("/public/icons/minimize-sign.svg")';
                return;
            }
            repliesSection.style.display === 'block' ? removeItemFromArray('expanded', id) : addItemToArray('expanded', id); 
            repliesSection.style.display = repliesSection.style.display === 'block' ? 'none' : 'block';
            expandBtn.style.backgroundImage = repliesSection.style.display === 'block' 
                ? 'url("/public/icons/minimize-sign.svg")'
                : 'url("/public/icons/plus.svg")';
        }

        getArrayFromQueryString('expanded').forEach(postId => {
            expandPost(postId);
        });

        document.querySelectorAll('.expand div').forEach(expandBtn => {
            expandBtn.addEventListener('click', () => {
                expandPost(expandBtn.closest('.post').id)
            });
        });

        document.querySelectorAll('.image-modal input[type="range"]').forEach(input => {
            input.oninput = function () {
                this.nextElementSibling.innerHTML = input.value;
                changeRangeInputGradient(input);
            }
        });

        document.querySelectorAll('.delete').forEach(delete_btn => {
            delete_btn.addEventListener('click', () => {
                showConfirm('Are you sure you want to delete the post?', () => {
                    const data = {
                        id: delete_btn.closest('.post').id
                    }
                    fetch(`<%= thread %>/deletePost`, {
                        method: 'DELETE',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify(data)
                    })
                    .then(response => response.json())
                    .then(data => {
                        location.reload();
                    });
                });
            });
        });

        document.querySelectorAll('.reply').forEach(reply_btn => {
            reply_btn.addEventListener('click', () => {
                // isFilteringEnabled = false;
                reply(
                    reply_btn.closest('.post').id, 
                    reply_btn.closest('.post').querySelector('.username').innerHTML
                );
            });
        });

        const reply = (post, username) => {
            const oldNewPost = document.querySelector('.new-post-container');
                if (oldNewPost && (oldNewPost.querySelector('textarea').value != '' || imageId != undefined)) {
                    if (imageId) sendRemoveImgReq();
                    showConfirm('Disgard new post?', () => {
                        createNewPost(post, username);
                    });
                    return;
                }
                createNewPost(post, username);
        };

        document.querySelectorAll('.image-block').forEach(block => {
            block.addEventListener('click', () => {
                const postId = block.getAttribute('postid');
                const post = document.getElementById(postId);

                function expandAndScroll(postElement) {
                    if (!postElement) return;

                    let parent = postElement.parentElement;
                    if (parent.classList.contains('replies-container')) {
                        let postId = parent.id.split('-replies')[0];
                        let parentPost = document.getElementById(postId);
                        expandPost(postId, true); // Expand the parent post.
                        if (parentPost) {
                            expandAndScroll(parentPost);
                        }
                    }
                    parent = parent.parentElement;

                    postElement.scrollIntoView({ behavior: 'smooth', block: 'center' });
                }
                expandAndScroll(post);
            });
        });

        const deployImg = (src) => {
            document.querySelector('.image-selection').style.display = 'none';
            const postImageDiv = document.createElement('div');
            postImageDiv.className = 'post-image';
            postImageDiv.id = imageId;
            postImageDiv.setAttribute('onclick', 'focusImage(this)');
            const img = document.createElement('img');
            img.className = 'post-image-src new-post-image-src';
            img.src = src;
            img.alt = '';
            const span = document.createElement('span');
            span.className = 'focus-image';

            postImageDiv.appendChild(img);
            postImageDiv.appendChild(span);
            const container = document.querySelector('.new-post-image-container');
            const removeImg = document.createElement('span');
            removeImg.className = 'remove-img';
            removeImg.addEventListener('click', () => {
                sendRemoveImgReq();
            });

            container.appendChild(postImageDiv);
            container.appendChild(removeImg);
        }

        const sendRemoveImgReq = () => {
            document.querySelector('.new-post-image-container').innerHTML = '';
            const data = {
                imageId: imageId,
                imageExt: imageExt,
            }
            fetch(`<%= thread %>/removeImg`, {
                method: 'DELETE',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(data)
            });
            imageId = undefined;
            imageExt = undefined;
            isFilteringEnabled = false;
            document.querySelector('.image-selection').style.display = 'inline-block';
        }

        const createNewPost = (id, name) => {
            const oldNewPost = document.querySelector('.new-post-container');
            if (oldNewPost) {
                oldNewPost.parentNode.removeChild(oldNewPost);
            }
            const postDiv = document.createElement('div');
            postDiv.className = 'post new-post-container';

            const postContentDiv = document.createElement('div');
            postContentDiv.className = 'post-content';

            const postHeaderDiv = document.createElement('div');
            postHeaderDiv.className = 'post-header';
            if (name) {
                const usernameH2 = document.createElement('h2');
                usernameH2.className = 'username';
                usernameH2.textContent = `Replying to ${name}...`;
    
                postHeaderDiv.appendChild(usernameH2);
            }

            const textarea = document.createElement('textarea');
            textarea.placeholder = 'Type something...';
            textarea.className = 'new-post-text';
            textarea.required = true;
            textarea.addEventListener('input', function () {
                this.style.height = 'auto';
                this.style.height = (this.scrollHeight - 10) + 'px';
            });

            const imageContainer = document.createElement('div');
            imageContainer.className = 'new-post-image-container'

            const hr = document.createElement('hr');

            const iconBarDiv = document.createElement('div');
            iconBarDiv.className = 'icon-bar';
            const imageInput = document.createElement('input');
            imageInput.type = 'file';
            imageInput.id = 'image-input';
            imageInput.name = 'image-input';
            imageInput.accept = 'image/gif, image/png, image/jpeg';
            const label = document.createElement('label');
            label.setAttribute('for', 'image-input');
            label.id = 'image-icon';
            const imageSelectionSpan = document.createElement('span');
            imageSelectionSpan.className = 'image-selection';

            const uploadPost = document.createElement('span');
            uploadPost.className = 'upload-post';

            label.appendChild(imageSelectionSpan);
            iconBarDiv.appendChild(imageInput);
            iconBarDiv.appendChild(label);
            iconBarDiv.appendChild(uploadPost);

            imageInput.addEventListener('input', () => {
                const formData = new FormData();
                const file = imageInput.files[0];
                const generatedId = generateId();
                const fullName = file.name;
                const extension = fullName.slice(((fullName.lastIndexOf(".") - 1) >>> 0) + 2);
                formData.append('image', file);
                // formData.append('filename', `${generatedId}.${extension}`);
                fetch(`<%= thread %>/upload`, {
                    method: 'POST',
                    headers: {
                        'image-Filename': `${generatedId}.${extension}`,
                    },
                    body: formData
                })
                .then(response => response.json())
                .then(data => {
                    imageId = generatedId;
                    imageExt = extension;
                    deployImg(data.filepath);
                });
            });

            uploadPost.addEventListener('click', () => {
                const data = {
                    replyToId: id,
                    text: document.querySelector('.new-post-text').value,
                    imageId: imageId,
                    imageExt: imageExt,
                }
                fetch(`<%= thread %>/createPost`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify(data)
                })
                .then(response => response.json())
                .then(data => {
                    location.reload();
                });
            });

            postContentDiv.appendChild(postHeaderDiv);
            postContentDiv.appendChild(textarea);
            postContentDiv.appendChild(imageContainer);
            postContentDiv.appendChild(hr);
            postContentDiv.appendChild(iconBarDiv);

            postDiv.appendChild(postContentDiv);

            const repliesContainer = document.querySelector(`[id="${id}-replies"]`) ? document.querySelector(`[id="${id}-replies"]`) : document.querySelector('.posts');
            // console.log(repliesContainer)
            repliesContainer.style.display = 'block';
            if (document.querySelector(`[id="${id}"] .expand span`)) {
                document.querySelector(`[id="${id}"] .expand span`).style.backgroundImage = 'url("/public/icons/minimize-sign.svg")';
            }
            if (!repliesContainer.classList.contains('posts')) {
                const currentMarginLeft = parseInt(document.querySelector(`[id="${id}"]`).style.marginLeft) || 0;
                postDiv.style.marginLeft = `${currentMarginLeft + 15}px`;
            }
            repliesContainer.appendChild(postDiv);
        }
    </script>
</body>
</html>